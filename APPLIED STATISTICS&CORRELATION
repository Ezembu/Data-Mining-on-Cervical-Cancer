# APPLIED STATISTICS

import numpy as np
import pandas as pd
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
%matplotlib inline
import math
import seaborn as sns

cancer_df = pd.read_csv ("/content/kag_risk_factors_cervical_cancer.csv")
cancer_df.head()

cancer_df.describe(include='all')

cancer_df.drop(['STDs: Time since first diagnosis','STDs: Time since last diagnosis'],inplace=True,axis=1)

cancer_df = cancer_df.replace('?', np.NaN)
cancer_df.dropna(inplace=True)

sns.catplot(data=cancer_df, x='Number of sexual partners', kind='count')
sns.catplot(data=cancer_df, x='Num of pregnancies', kind='count')
sns.catplot(data=cancer_df, x='IUD', kind='count')
sns.catplot(data=cancer_df, x='STDs', kind='count')

numerical_df = ['Age', 'Number of sexual partners', 'First sexual intercourse','Num of pregnancies', 'Smokes (years)',
                'Smokes (packs/year)','Hormonal Contraceptives (years)','IUD (years)','STDs (number)']
categorical_df = ['Smokes','Hormonal Contraceptives','IUD','STDs','STDs:condylomatosis','STDs:cervical condylomatosis',
                  'STDs:vaginal condylomatosis','STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',
                  'STDs:pelvic inflammatory disease', 'STDs:genital herpes','STDs:molluscum contagiosum', 'STDs:AIDS',
                  'STDs:HIV','STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis','Dx:Cancer', 'Dx:CIN',
                  'Dx:HPV', 'Dx', 'Hinselmann', 'Schiller','Citology', 'Biopsy']

cancer_df['Number of sexual partners'] = pd.to_numeric(cancer_df['Number of sexual partners'], errors='coerce')
cancer_df['Num of pregnancies'] = pd.to_numeric(cancer_df['Num of pregnancies'], errors='coerce')
cancer_df['First sexual intercourse'] = pd.to_numeric(cancer_df['First sexual intercourse'], errors='coerce')
cancer_df['IUD'] = pd.to_numeric(cancer_df['IUD'], errors='coerce')
cancer_df['Smokes (packs/year)'] = pd.to_numeric(cancer_df['Smokes (packs/year)'], errors='coerce')
cancer_df['STDs'] = pd.to_numeric(cancer_df['STDs'], errors='coerce')


# Filter numeric columns
numeric_df = cancer_df[cancer_df.select_dtypes(['number']).columns]



# Create FacetGrid

# Plot boxplots in one figure
sns.boxplot(data=numeric_df, x='First sexual intercourse')

iso = IsolationForest(contamination=0.01)
iso.fit(cancer_df[['Number of sexual partners','Num of pregnancies','Smokes (packs/year)', 'STDs']])
cancer_df['outliers'] = iso.predict(cancer_df[['Number of sexual partners','Num of pregnancies','Smokes (packs/year)', 'STDs']])

# Stats on outliers
print(cancer_df['outliers'].value_counts())
print(cancer_df[cancer_df['outliers'] == -1].describe())

# Remove outliers
cancer_df = cancer_df[cancer_df['outliers'] != -1]
cancer_df = cancer_df.drop('outliers', axis=1)

# Validate distributions after outlier removal
print(cancer_df['Number of sexual partners'].describe())
print(cancer_df['Num of pregnancies'].describe())
print(cancer_df ['STDs'].describe())
print(cancer_df['Smokes (packs/year)'].describe())


cancer_df['Age'].hist(bins=70)
plt.xlabel('Age')
plt.ylabel('Count')
print('Mean age of the Women facing the risk of Cervical cancer',cancer_df['Age'].mean())

# Histogram of Ages
plt.hist(cancer_df['Age'], bins=20)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Distribution of Ages')
plt.show()

# Boxplot of Ages by Cancer Diagnosis
cancer_df.boxplot(by='Dx:Cancer', column='Age')

plt.xlabel('Cancer Diagnosis')
plt.ylabel('Age')
plt.title('Age Distribution by Cancer Diagnosis')
plt.show()

plt.scatter(cancer_df['Age'], cancer_df['Dx:Cancer'], c=cancer_df['IUD'])
plt.colorbar(label='IUD')
plt.xlabel('Age')
plt.ylabel('Dx:Cancer')
plt.title('Relationship of Age and Cancer by IUD')

# Histograms by IUD
fig, axs = plt.subplots(1, 2, tight_layout=True)
cancer_df[cancer_df['IUD']==0]['Age'].hist(ax=axs[0])
axs[0].set_title('No IUD')
cancer_df[cancer_df['IUD']==1]['Age'].hist(ax=axs[1])
axs[1].set_title('With IUD')

plt.show()

cancer_df = cancer_df[pd.to_numeric(cancer_df['Hormonal Contraceptives'], errors='coerce').notnull()]
cancer_df['Hormonal Contraceptives'].hist(by=cancer_df['Dx:Cancer'], bins=20)
plt.xlabel('Hormonal Contraceptives')
plt.ylabel('Frequency')
plt.legend(['No Cancer', 'Cancer'])
no_cancer = cancer_df[cancer_df['Dx:Cancer'] == 0]
cancer = cancer_df[cancer_df['Dx:Cancer'] == 1]
no_cancer['Hormonal Contraceptives'].hist(color='blue')
cancer['Hormonal Contraceptives'].hist(color='red')
plt.title('Distribution by Cancer Diagnosis')

# Boxplot
cancer_df['Hormonal Contraceptives'] = pd.to_numeric(cancer_df['Hormonal Contraceptives'], errors='coerce')
cancer_df.boxplot(column='Hormonal Contraceptives', by='Dx:Cancer')
plt.xlabel('Cancer Diagnosis')
plt.ylabel('Hormonal Contraceptives')
plt.title('Hormonal Contraceptives by Cancer Diagnosis')

plt.show()

cancer_df = cancer_df[pd.to_numeric(cancer_df['Hormonal Contraceptives'], errors='coerce').notnull()]
cancer_df['Hormonal Contraceptives'].hist(by=cancer_df['Dx:Cancer'], bins=20)
plt.xlabel('Hormonal Contraceptives')
plt.ylabel('Frequency')
plt.legend(['No Cancer', 'Cancer'])
no_cancer = cancer_df[cancer_df['Dx:Cancer'] == 0]
cancer = cancer_df[cancer_df['Dx:Cancer'] == 1]
no_cancer['Hormonal Contraceptives'].hist(color='blue')
cancer['Hormonal Contraceptives'].hist(color='red')
plt.title('Distribution by Cancer Diagnosis')

# Boxplot
cancer_df['Hormonal Contraceptives'] = pd.to_numeric(cancer_df['Hormonal Contraceptives'], errors='coerce')
cancer_df.boxplot(column='Hormonal Contraceptives', by='Dx:Cancer')
plt.xlabel('Cancer Diagnosis')
plt.ylabel('Hormonal Contraceptives')
plt.title('Hormonal Contraceptives by Cancer Diagnosis')

plt.show()

CORRELATION
pip install pandas matplotlib

pip install matplotlib seaborn

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['STDs:HPV']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("STDs:HPV")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['Smokes']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("Smokes")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['Hormonal Contraceptives']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("Hormonal Contraceptives")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
from scipy.stats import pearsonr

# Read the CSV file
df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

df['Number of sexual partners'] = pd.to_numeric(df['Number of sexual partners'], errors='coerce')
df.dropna(subset=['Number of sexual partners', 'Dx:Cancer'], inplace=True)


# Check unique values in the 'STDs' and 'Dx:Cancer' columns
print(df['STDs'].unique())
print(df['Dx:Cancer'].unique())

# Convert non-numeric values to NaN
df['STDs'] = pd.to_numeric(df['STDs'], errors='coerce')
df['Dx:Cancer'] = pd.to_numeric(df['Dx:Cancer'], errors='coerce')

# Drop rows with NaN values
df.dropna(subset=['STDs', 'Dx:Cancer'], inplace=True)

# Extract relevant columns
x = df['Number of sexual partners']
y = df['STDs']
z = df['Dx:Cancer']

# Calculate Pearson's correlation between x and z
corr_xz, p_xz = pearsonr(df['Number of sexual partners'], df['Dx:Cancer'])


# Calculate Pearson's correlation between y and z
corr_yz, p_yz = pearsonr(y, z)

# Print results
print('Correlation between partners and cancer: {:.3f}'.format(corr_xz))
print('p-value: {:.3f}'.format(p_xz))

print('Correlation between STDs and cancer: {:.3f}'.format(corr_yz))
print('p-value: {:.3f}'.format(p_yz))

import matplotlib.pyplot as plt


# Scatter plot between y and z
plt.scatter(y, z)
plt.plot(y, np.poly1d(np.polyfit(y, z, 1))(y))
plt.xlabel('STDs')
plt.ylabel('Cancer diagnosis')

plt.show()

import matplotlib.pyplot as plt
# Scatter plot between x and z
plt.scatter(x, z)
plt.plot(x, np.poly1d(np.polyfit(x, z, 1))(x))
plt.xlabel('Number of sexual partners')
plt.ylabel('Cancer diagnosis')

import seaborn as sns

# Calculate correlation matrix
corr = df[['Number of sexual partners', 'STDs', 'Dx:Cancer']].corr()

# Generate heatmap
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.show()

sns.pairplot(df[['Number of sexual partners', 'STDs', 'Dx:Cancer']])
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')
# EDA
print(df['Hormonal Contraceptives'].value_counts())
print(df.groupby('Hormonal Contraceptives')['Dx:Cancer'].value_counts(normalize=True))

# Visualization
sns.catplot(x='Hormonal Contraceptives', kind='count', data=df)
sns.catplot(x='Hormonal Contraceptives', hue='Dx:Cancer', kind='count', data=df)

sns.boxplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df)

sns.violinplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df, inner=None)
sns.swarmplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df, color='k')

plt.show()
