# CORRELATION
pip install pandas matplotlib

pip install matplotlib seaborn

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['STDs:HPV']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("STDs:HPV")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['Smokes']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("Smokes")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

# Select two categorical columns to analyze
x = df['Hormonal Contraceptives']
y = df['Dx:Cancer']

# Create contingency table
contingency_table = pd.crosstab(x, y)

# Perform chi-squared test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Interpret p-value
alpha = 0.05
print("p value is " + str(p))
if p <= alpha:
    print('Dependent (reject H0)')
else:
    print('Independent (fail to reject H0)')

# Plot contingency table
plt.figure(figsize=(8, 6))
contingency_table.plot(kind='bar', stacked=True)
plt.title("Contingency Table")
plt.xlabel("Hormonal Contraceptives")
plt.ylabel("Frequency")
plt.legend(title="Dx:Cancer")
plt.show()

import pandas as pd
from scipy.stats import pearsonr

# Read the CSV file
df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')

df['Number of sexual partners'] = pd.to_numeric(df['Number of sexual partners'], errors='coerce')
df.dropna(subset=['Number of sexual partners', 'Dx:Cancer'], inplace=True)


# Check unique values in the 'STDs' and 'Dx:Cancer' columns
print(df['STDs'].unique())
print(df['Dx:Cancer'].unique())

# Convert non-numeric values to NaN
df['STDs'] = pd.to_numeric(df['STDs'], errors='coerce')
df['Dx:Cancer'] = pd.to_numeric(df['Dx:Cancer'], errors='coerce')

# Drop rows with NaN values
df.dropna(subset=['STDs', 'Dx:Cancer'], inplace=True)

# Extract relevant columns
x = df['Number of sexual partners']
y = df['STDs']
z = df['Dx:Cancer']

# Calculate Pearson's correlation between x and z
corr_xz, p_xz = pearsonr(df['Number of sexual partners'], df['Dx:Cancer'])


# Calculate Pearson's correlation between y and z
corr_yz, p_yz = pearsonr(y, z)

# Print results
print('Correlation between partners and cancer: {:.3f}'.format(corr_xz))
print('p-value: {:.3f}'.format(p_xz))

print('Correlation between STDs and cancer: {:.3f}'.format(corr_yz))
print('p-value: {:.3f}'.format(p_yz))

import matplotlib.pyplot as plt


# Scatter plot between y and z
plt.scatter(y, z)
plt.plot(y, np.poly1d(np.polyfit(y, z, 1))(y))
plt.xlabel('STDs')
plt.ylabel('Cancer diagnosis')

plt.show()

import matplotlib.pyplot as plt
# Scatter plot between x and z
plt.scatter(x, z)
plt.plot(x, np.poly1d(np.polyfit(x, z, 1))(x))
plt.xlabel('Number of sexual partners')
plt.ylabel('Cancer diagnosis')

import seaborn as sns

# Calculate correlation matrix
corr = df[['Number of sexual partners', 'STDs', 'Dx:Cancer']].corr()

# Generate heatmap
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.show()

sns.pairplot(df[['Number of sexual partners', 'STDs', 'Dx:Cancer']])
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv('/content/kag_risk_factors_cervical_cancer.csv')
# EDA
print(df['Hormonal Contraceptives'].value_counts())
print(df.groupby('Hormonal Contraceptives')['Dx:Cancer'].value_counts(normalize=True))

# Visualization
sns.catplot(x='Hormonal Contraceptives', kind='count', data=df)
sns.catplot(x='Hormonal Contraceptives', hue='Dx:Cancer', kind='count', data=df)

sns.boxplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df)

sns.violinplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df, inner=None)
sns.swarmplot(x='Hormonal Contraceptives', y='Dx:Cancer', data=df, color='k')

plt.show()
